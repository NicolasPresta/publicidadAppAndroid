package com.example.presta.publicidadexample.dataAccess.model.v2;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.example.presta.publicidadexample.dataAccess.model.v2.PhoneData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PHONE_DATA".
*/
public class PhoneDataDao extends AbstractDao<PhoneData, Long> {

    public static final String TABLENAME = "PHONE_DATA";

    /**
     * Properties of entity PhoneData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DeviceId = new Property(1, String.class, "deviceId", false, "DEVICE_ID");
        public final static Property SubscriberId = new Property(2, String.class, "subscriberId", false, "SUBSCRIBER_ID");
        public final static Property SimSerialNumber = new Property(3, String.class, "simSerialNumber", false, "SIM_SERIAL_NUMBER");
        public final static Property Line1Number = new Property(4, String.class, "line1Number", false, "LINE1_NUMBER");
        public final static Property NetworkOperatorName = new Property(5, String.class, "networkOperatorName", false, "NETWORK_OPERATOR_NAME");
        public final static Property NetworkCountryIso = new Property(6, String.class, "networkCountryIso", false, "NETWORK_COUNTRY_ISO");
        public final static Property SDK_INT = new Property(7, Integer.class, "SDK_INT", false, "SDK__INT");
        public final static Property MANUFACTURER = new Property(8, String.class, "MANUFACTURER", false, "MANUFACTURER");
        public final static Property MODEL = new Property(9, String.class, "MODEL", false, "MODEL");
        public final static Property DatosSincronizados = new Property(10, Boolean.class, "datosSincronizados", false, "DATOS_SINCRONIZADOS");
    };


    public PhoneDataDao(DaoConfig config) {
        super(config);
    }
    
    public PhoneDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PHONE_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"DEVICE_ID\" TEXT," + // 1: deviceId
                "\"SUBSCRIBER_ID\" TEXT," + // 2: subscriberId
                "\"SIM_SERIAL_NUMBER\" TEXT," + // 3: simSerialNumber
                "\"LINE1_NUMBER\" TEXT," + // 4: line1Number
                "\"NETWORK_OPERATOR_NAME\" TEXT," + // 5: networkOperatorName
                "\"NETWORK_COUNTRY_ISO\" TEXT," + // 6: networkCountryIso
                "\"SDK__INT\" INTEGER," + // 7: SDK_INT
                "\"MANUFACTURER\" TEXT," + // 8: MANUFACTURER
                "\"MODEL\" TEXT," + // 9: MODEL
                "\"DATOS_SINCRONIZADOS\" INTEGER);"); // 10: datosSincronizados
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PHONE_DATA\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PhoneData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(2, deviceId);
        }
 
        String subscriberId = entity.getSubscriberId();
        if (subscriberId != null) {
            stmt.bindString(3, subscriberId);
        }
 
        String simSerialNumber = entity.getSimSerialNumber();
        if (simSerialNumber != null) {
            stmt.bindString(4, simSerialNumber);
        }
 
        String line1Number = entity.getLine1Number();
        if (line1Number != null) {
            stmt.bindString(5, line1Number);
        }
 
        String networkOperatorName = entity.getNetworkOperatorName();
        if (networkOperatorName != null) {
            stmt.bindString(6, networkOperatorName);
        }
 
        String networkCountryIso = entity.getNetworkCountryIso();
        if (networkCountryIso != null) {
            stmt.bindString(7, networkCountryIso);
        }
 
        Integer SDK_INT = entity.getSDK_INT();
        if (SDK_INT != null) {
            stmt.bindLong(8, SDK_INT);
        }
 
        String MANUFACTURER = entity.getMANUFACTURER();
        if (MANUFACTURER != null) {
            stmt.bindString(9, MANUFACTURER);
        }
 
        String MODEL = entity.getMODEL();
        if (MODEL != null) {
            stmt.bindString(10, MODEL);
        }
 
        Boolean datosSincronizados = entity.getDatosSincronizados();
        if (datosSincronizados != null) {
            stmt.bindLong(11, datosSincronizados ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PhoneData readEntity(Cursor cursor, int offset) {
        PhoneData entity = new PhoneData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // deviceId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // subscriberId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // simSerialNumber
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // line1Number
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // networkOperatorName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // networkCountryIso
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // SDK_INT
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // MANUFACTURER
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // MODEL
            cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0 // datosSincronizados
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PhoneData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDeviceId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSubscriberId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSimSerialNumber(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLine1Number(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setNetworkOperatorName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setNetworkCountryIso(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSDK_INT(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setMANUFACTURER(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setMODEL(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setDatosSincronizados(cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PhoneData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PhoneData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
